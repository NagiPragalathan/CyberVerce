/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 .\public\models\train.gltf m -o .\src\components\Train.jsx -r public 
Author: Jesper Landin (https://sketchfab.com/JesperLandin)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/eg-507-b6f3166625ab42349e1bd4df8d6e8df9
Title: EG 507
*/

import React, { useRef, useMemo } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useGraph } from "@react-three/fiber";
import { SkeletonUtils } from "three-stdlib";
import { useFrame, useThree } from "@react-three/fiber";
import { CapsuleCollider, RigidBody, vec3 } from "@react-three/rapier";
import { isHost } from "playroomkit";

export function Train(props) {
  const group = useRef();
  const rigi = useRef();
  const MOVEMENT_SPEED = 10;
  const { scene, materials, animations } = useGLTF('/models/train.gltf')
  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  console.log(group)
  useFrame((_, delta) => {
    // Update the box's position
    
    // group.current.position.x += 0.1;
    const impulse = {
      x: 10 * MOVEMENT_SPEED * delta,
      y: 0,
      z:0,
    };
    // rigi.current.setNextKinematicTranslation(impulse)
    rigi.current.applyImpulse(impulse, true);

  });

  console.log(actions)
  return (
    <RigidBody ref={rigi} 
    linearDamping={12}
    lockRotations colliders={false}
    type="dynamic">
      <group {...props} dispose={null} ref={group}>
        <group scale={0.01}>
          <mesh geometry={nodes.pCube4_floor_0.geometry} material={materials.floor} position={[0, 4.861, -14.454]} scale={[8.574, 0.356, 1]} />
          <mesh geometry={nodes.pCube5_under_0.geometry} material={materials.under} />
          <mesh geometry={nodes.polySurface47_body_01_0.geometry} material={materials.body_01} />
          <mesh geometry={nodes.polySurface93_body_02_0.geometry} material={materials.body_02} />
          <mesh geometry={nodes.pCube904_window_glass_0.geometry} material={materials.window_glass} />
          <mesh geometry={nodes.polySurface88_wheels_0.geometry} material={materials.wheels} />
          <mesh geometry={nodes.pCube908_coupling_rods_0.geometry} material={materials.coupling_rods} />
          <mesh geometry={nodes.pCube908_coupling_rods_0_1.geometry} material={materials.coupling_rods} />
          <mesh geometry={nodes.pCube914_under_detail_0.geometry} material={materials.under_detail} />
          <mesh geometry={nodes.pCube914_under_detail_0_1.geometry} material={materials.under_detail} />
          <mesh geometry={nodes.pCube914_under_detail_0_2.geometry} material={materials.under_detail} />
          <mesh geometry={nodes.pCylinder159_detail_01_0.geometry} material={materials.detail_01} />
          <mesh geometry={nodes.pCube928_detail_04_0.geometry} material={materials.detail_04} />
          <mesh geometry={nodes.pCube928_detail_04_0_1.geometry} material={materials.detail_04} />
          <mesh geometry={nodes.polySurface95_body_03_0.geometry} material={materials.body_03} />
          <mesh geometry={nodes.pCube934_pantographs_0.geometry} material={materials.pantographs} />
          <mesh geometry={nodes.pCube934_pantographs_0_1.geometry} material={materials.pantographs} />
          <mesh geometry={nodes.pCube934_pantographs_0_2.geometry} material={materials.pantographs} />
          <mesh geometry={nodes.polySurface104_roof_0.geometry} material={materials.roof} />
          <mesh geometry={nodes.pCylinder162_lantern_glass_0.geometry} material={materials.lantern_glass} />
          <mesh geometry={nodes.pCube939_detail_02_0.geometry} material={materials.detail_02} />
          <mesh geometry={nodes.pCylinder163_detail_03_0.geometry} material={materials.detail_03} />
        </group>
      </group>
      <CapsuleCollider args={[0.7, 0.6]} position={[0, 1.28, 0]} />
    </RigidBody>
  )
}

useGLTF.preload('/models/train.gltf')
